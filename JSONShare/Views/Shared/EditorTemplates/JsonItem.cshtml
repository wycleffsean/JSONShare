@model JSONShare.Models.JsonItem

<style>
    pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }
    .string { color: green; }
    .number { color: darkorange; }
    .boolean { color: blue; }
    .null { color: magenta; }
    .key { color: red; }
</style>

<script type="text/javascript">
    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }
    $(function () {
        var viewModel = {}
        viewModel.json = ko.observable("@Html.Raw(Model.Json.Replace("\"","\\\""))");
        viewModel.valid = ko.computed(function () {
            var valid,
                json = ko.utils.unwrapObservable(viewModel.json);
            try {
                var obj = eval("[" + json + "]"); //JSON.parse(json);
                valid = true;
            }
            catch (e) { valid = false; }

            return valid;
        })
        viewModel.beautified = ko.computed(function () {
            var result = "";
            try {
                var obj = eval("[" + ko.utils.unwrapObservable(viewModel.json) + "]");
                result = js_beautify(JSON.stringify(obj[0]));
            }
            catch (e) { }
            return syntaxHighlight(result);
        });

        ko.applyBindings(viewModel);
    });
    
</script>

<div class="editor-label">
    @Html.LabelFor(model => model.Title)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Title)
    @Html.ValidationMessageFor(model => model.Title)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Json)
</div>
<div class="editor-field">    
    @Html.TextAreaFor(model => model.Json, new { data_bind = "value: json, valueUpdate: 'afterkeydown'" })
    @Html.ValidationMessageFor(model => model.Json)
</div>

<button data-bind="enable: valid">Save</button>

<pre data-bind="html: beautified"></pre>
